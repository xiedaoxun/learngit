启动k8s：
1. 启动etcd
   etcd -initial-advertise-peer-urls http://127.0.0.1:2380 -listen-peer-urls http://127.0.0.1:2380 -listen-client-urls http://127.0.0.1:2379,http://127.0.0.1:2379 -advertise-client-urls http://127.0.0.1:2379 &

2. 创建key
   openssl genrsa -out /etc/kubernetes/serviceaccount.key 2048

3. 启动kube-apiserver
   kube-apiserver --address=0.0.0.0  --service-account-key-file=/etc/kubernetes/serviceaccount.key --insecure-port=8080 --service-cluster-ip-range='10.10.10.1/24' --log-dir=/usr/local/kubernete_test/logs/kube --kubelet-port=10250 --v=0 --logtostderr=false --etcd-servers=http://127.0.0.1:2379 --allow-privileged=false &

4. 启动kube-controller-manager
   kube-controller-manager  --service-account-private-key-file=/etc/kubernetes/serviceaccount.key --v=0 --logtostderr=false --log-dir=/usr/local/kubernete_test/logs/kube --master=127.0.0.1:8080 &

5. 启动kube-scheduler 
   kube-scheduler  --master='127.0.0.1:8080' --v=0  --log-dir=/usr/local/kubernete_test/logs/kube &

6. 由于之前胡乱安装导致kubectl命令默认与192.168.99.100通信（暂时未google解决，后面解决），故先修改kubectl命令默认动作
    alias kubectl=" kubectl -s http://127.0.0.1:8080"

7. 测试master节点是否正常启动
   kubectl get componentstatuses

8. 启动kube-proxy 
    kube-proxy  --logtostderr=false --v=0 --master=http://127.0.0.1:8080 &

9. 启动kubelet
    kubelet  --logtostderr=false --v=0 --log-dir=/usr/local/kubernete_test/logs/kube  --hostname-override=127.0.0.1 --fail-swap-on=false &

10.在Node上设置集群Context
    kubectl config set-cluster test-cluster --server=http://127.0.0.1:8080
    kubectl config set-context test-cluster --cluster=test-cluster
    kubectl config use-context test-cluster 

11.由于单机部署，需要开启允许master部署pod
  允许master部署pod
  kubectl taint nodes --all node-role.kubernetes.io/master-

  禁止master部署pod
  kubectl taint nodes centos-master-1 node-role.kubernetes.io/master=true:NoSchedule

12.确认K8S是否启动成功
  kubectl get nodes

13.创建Nginx Pods
   kubectl run nginx --image=nginx --port=80  --replicas=5
   kubectl get pods
   
14.创建nginx-service.yaml 
    apiVersion: v1
	kind: Service
	metadata:
	  name: nginx
	  labels:
		app: nginx
	spec:
	  ports:
	  - port: 80
		targetPort: 9090
	  selector:
		name: nginx
		
15.根据Pods创建Service
   kubectl create -f nginx-service.yaml或者kubectl apply -f nginx-service.yaml
   kubectl get services

部署参考：https://www.cnblogs.com/edisonxiang/p/6911994.html
          https://github.com/kubernetes/kubernetes(源码编译部署)

命令：
1. 查看各pod状态:kubectl get pod [--all-namespaces] [-o json|wide..]
   kubelet是唯一没有以容器运行的组件，它是通过systemd运行，通过systemctl status kubelet.service查看
2. 查看pod详细信息：kubectl descirbe pod pod-name
3. 查看各节点状态: kubectl get nodes
4. 部署应用：kubectl run deployment-name --image=image --replicas=num 或
             kubectl apply -f file.yml(推荐)
5. 查看应用状态:kubectl get deployment [deployment-name]
6. 查看详细信息：kubectl describe deployment/pod/service/.. name
7. 查看replicaset信息：kubectl get replicaset
8. 查看replicaset详细信息：kubectl describe replicaset replicaset-name
9. 删除deployment,replicaset,pod资源:kubectl delete deployment deployment-name 或者
                                     kubectl delete -f file.yml
10.若要scale up/down：修改yml文件中的副本数，再kubectl apply即可
11.允许master部署pod:kubectl taint nodes --all node-role.kubernetes.io/master-
   禁止master部署pod:kubectl taint nodes centos-master-1 node-role.kubernetes.io/master=true:NoSchedule
12.添加label：kubectl label node node-name key=value
13.删除lebel: kubectl label node node-name key-,删除lebel不会导致pod重新部署,除非重新apply
14.查看节点label：kubectl get node --show-labels
15.查看集群每个运行资源的配置和状态：kubectl edit deployment/daemonset xxx
16.查看pod的标准输出:kubectl logs pod-name
17.在apiserver中加入cronjob功能：修改apiserver的配置文件（/etc/kubernetes/manifests/kube-apiserver.yaml）,在启动参数中加上--runtime-config=batch/v2alpha1=true,然后重启kubelet(systemctl restart kubelet.service,因为kubelet会重启apiserver pod)，通过kubectl api-versions确认已经支持 batch/v2alpha1
